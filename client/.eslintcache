[{"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/index.js":"1","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/App.js":"2","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/includes/header.js":"3","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Profile/profile.js":"4","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Homepage/homepage.js":"5","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Notification/notify.js":"6","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Notification/card.js":"7","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Login/Login.js":"8","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Signup/Signup.js":"9","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Blog/upload.js":"10","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Blog/Details.js":"11","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/includes/footer.js":"12","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Blog/commentCard.js":"13","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Test.js":"14","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Blog/blogCard.js":"15"},{"size":145,"mtime":1606562893335,"results":"16","hashOfConfig":"17"},{"size":1179,"mtime":1606984182878,"results":"18","hashOfConfig":"17"},{"size":6703,"mtime":1607096539541,"results":"19","hashOfConfig":"17"},{"size":2303,"mtime":1607083114762,"results":"20","hashOfConfig":"17"},{"size":954,"mtime":1607083056402,"results":"21","hashOfConfig":"17"},{"size":835,"mtime":1606718702941,"results":"22","hashOfConfig":"17"},{"size":2633,"mtime":1606714347424,"results":"23","hashOfConfig":"17"},{"size":4797,"mtime":1607097219575,"results":"24","hashOfConfig":"17"},{"size":4855,"mtime":1607069901524,"results":"25","hashOfConfig":"17"},{"size":10034,"mtime":1607096504309,"results":"26","hashOfConfig":"17"},{"size":15760,"mtime":1607096411561,"results":"27","hashOfConfig":"17"},{"size":1379,"mtime":1606846885218,"results":"28","hashOfConfig":"17"},{"size":1872,"mtime":1607096381433,"results":"29","hashOfConfig":"17"},{"size":4352,"mtime":1607096358113,"results":"30","hashOfConfig":"17"},{"size":8125,"mtime":1607081728765,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"5uy03c",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/index.js",[],["68","69"],"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/App.js",[],["70","71"],"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/includes/header.js",[],"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Profile/profile.js",[],"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Homepage/homepage.js",[],"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Notification/notify.js",["72"],"import React, { useState } from 'react'\nimport { withRouter, Redirect } from 'react-router-dom'\n\nimport NotiCard from './card'\nimport HeaderBar from '../includes/header'\n\nfunction Notify(props) {\n  const [redirectUrl, setRedirect] = useState(null)\n  let type = new URLSearchParams(props.location.search).get('type')\n\n  return (\n    <>{(redirectUrl) ?\n      <Redirect to={redirectUrl} /> :\n      <>\n        <div><HeaderBar></HeaderBar>\n          {(() => {\n            switch (type) {\n              case \"comments\": return <NotiCard react={type} />\n              case \"likes\": return <NotiCard react={type} />\n              case \"impressions\": return <NotiCard react={type} />\n              default: return <p>Nothing is Here</p>;\n            }\n          })()}\n        </div>\n      </>}\n    </>\n  )\n}\n\nexport default withRouter(Notify)\n\n",["73","74"],"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Notification/card.js",[],"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Login/Login.js",[],"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Signup/Signup.js",[],"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Blog/upload.js",[],"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Blog/Details.js",["75"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios'\n// import io from 'socket.io-client'\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\nimport OfflineBoltOutlinedIcon from '@material-ui/icons/OfflineBoltOutlined';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport OfflineBoltIcon from '@material-ui/icons/OfflineBolt';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\nimport Button from '@material-ui/core/Button';\nimport ReplyIcon from '@material-ui/icons/Reply';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport HeaderBar from '../includes/header'\nimport './details.css';\nimport CommentCard from './commentCard'\n\n// let socket;\nfunction BlogDetail(props) {\n  const classes = useStyles();\n  let blogId = new URLSearchParams(props.location.search).get('blogId')\n  const [activeUser, setActiveUser] = useState({})\n  const [loggedIn, setLoggein] = useState(false)\n  const [liked, setLiked] = useState(false)\n  const [impressed, setImpression] = useState(false)\n  const [likeCount, setLCount] = useState(0)\n  const [impCount, setICount] = useState(0)\n  const [visiCount, setVCount] = useState(0)\n  const [activeReaders, setActiveReaders] = useState(0)\n  const [BlogData, setBlogData] = useState({})\n  const [tags, setTags] = useState([])\n  const [commentInput, setCommentInput] = useState([])\n  const [reply_bool, setReplyBool] = useState(true)\n  const [replyInput, setreplyInput] = useState([])\n  const [commentData, setCommentData] = useState([])\n  const [selectedComment, setSelectedComment] = useState('');\n\n  useEffect(() => {\n    try {\n      // socket = io('https://datagrokrwebapp.herokuapp.com/')\n      // get blog details\n      axios({\n        method: 'POST',\n        url: '/read',\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        },\n        data: { blogId }\n      })\n        .then(res => {\n          if (!res.data) alert('NO data found')\n          else {\n            setBlogData(res.data.blogData)\n            setLiked(res.data.like_bool)\n            setImpression(res.data.impress_bool)\n            setLCount(res.data.blogData.Likes.length)\n            setICount(res.data.blogData.Impressions.length)\n            setVCount(res.data.blogData.visitorsCount)\n            setTags(res.data.blogData.Tags.split(','))\n            setLoggein(res.data.logged_in)\n            // get comments' detail\n            axios.post('/get/comment', { blogId })\n              .then(res => {\n                setCommentData(res.data)\n              })\n          }\n        })\n      // User's Details\n      axios.get('/user/login')\n        .then(res => { setActiveUser(res.data.activeUser) })\n      // count this user as active reader\n\n      // socket.on('connect', () => {\n      //   socket.emit('readBlog', { blogId }, (currentViewers) => {\n      //     console.log(currentViewers)\n      //     setActiveReaders(currentViewers)\n      //   });\n      // });\n    } catch (error) {\n      console.log(error)\n    }\n  }, [blogId])\n\n  function Comment({ comment }) {\n    const nestedComments = (comment.Comments || []).map(comment => {\n      return <Comment key={comment.commentId} comment={comment} type=\"child\" />\n    })\n    // Comment Text\n    return (\n      <div style={{ \"marginLeft\": \"25px\", \"marginTop\": \"10px\" }}>\n        <div className=\"comment-form\" id=\"new_comment\">\n          <span className=\"blog-avatar m:blog-avatar--l mr-2 shrink-0\">\n            <img src=\"https://avatars1.githubusercontent.com/u/32240906?s=460&v=4\"\n              width=\"32\" height=\"32\" alt=\"pic\" className=\"blog-avatar__image overflow-hidden\" id=\"comment-primary-user-profile--avatar\" />\n          </span>\n          <div className=\"comment-form__field\">\n            <p className=\"comment-show\" style={{ border: '1px', padding: '10px' }}>\n              <div className=\"article__subheader\">\n                <a href={'/'} style={{ color: '#fff' }} className=\"flex items-center mr-4 mb-4 s:mb-0 fw-medium blog-link\">\n                  {comment.author}</a>\n                <span className=\"fs-s mb-4 s:mb-0\">\n                  ・<time dateTime={comment.date_created} style={{ color: '#999' }} title={comment.date_created}>\n                    {new Date(comment.date_created).toString().substring(0, 15)}\n                  </time>\n                </span>\n              </div>{comment.text}\n            </p>\n          </div>\n        </div>\n        {selectedComment === comment._id && replyInput}\n        <div className=\"reply-btn\">\n          {reply_bool && loggedIn &&\n            <>\n              <Button style={{ marginRight: 30 }} startIcon={<ReplyIcon />}\n                onClick={() => addReplyCard(comment._id)} size=\"small\">Reply</Button>\n              {(activeUser.fullname === comment.author) && <>\n                <Button style={{ marginRight: 30 }} startIcon={<EditIcon />}\n                  onClick={() => editComment(comment._id, comment.parentId, comment.level, comment.commentId)} size=\"small\">Edit</Button>\n                <Button style={{ marginRight: 30 }} startIcon={<DeleteIcon />}\n                  onClick={() => deleteComment(comment._id, comment.parentId, comment.level, comment.commentId)} size=\"small\">Delete</Button></>\n              }\n            </>\n          }\n        </div>\n        {nestedComments}\n      </div>\n    )\n  }\n\n  const editComment = (id, parentId, level, commentId) => {\n    try {\n      let newText = window.prompt('Enter Comment Text');\n      if (newText) {\n        axios.post('/edit/comment', { id, parentId, level, commentId, newText })\n          .then(res => {\n            if (!res.data.is_updated) alert('Something went Wrong')\n            window.location.reload()\n          })\n      }\n    } catch (error) {\n      console.log(error)\n      alert('Something went Wrong.')\n    }\n  }\n\n  const deleteComment = (id, parentId, level, commentId) => {\n    try {\n      axios.post('/delete/comment', { id, parentId, level, commentId })\n        .then(res => {\n          alert(res.data.is_deleted ? 'Comment deleted Successfully' : 'Something went Wrong')\n          window.location.reload()\n        })\n    } catch (error) {\n      console.log(error)\n      alert('Unable to Delete! Something went Wrong.')\n    }\n  }\n\n  const uploadReply = async (id) => {\n    try {\n      axios.post('/add/reply', {\n        blogId: blogId,\n        commentText: document.getElementById('replytext' + id).value,\n        id: id\n      }).then(res => {\n        if (res.data.replied)\n          window.location.reload()\n        else\n          alert(\"Something went Wrong\")\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const addReplyCard = (id) => {\n    setSelectedComment(id)\n    setReplyBool(false)\n    // Add Comment Box\n    setreplyInput(replyInput.concat(\n      <div className=\"reply-container\" key={Math.random()} data-commentable-type=\"Article\">\n        <form className=\"comment-form\" id=\"new_comment\" action=\"/comments\" acceptCharset=\"UTF-8\" method=\"post\"><input name=\"utf8\" type=\"hidden\" value=\"✓\" />\n          <span className=\"blog-avatar m:blog-avatar--l mr-2 shrink-0\">\n            <img src=\"https://avatars1.githubusercontent.com/u/32240906?s=460&v=4\"\n              width=\"32\" height=\"32\" alt=\"pic\" className=\"blog-avatar__image overflow-hidden\" id=\"comment-primary-user-profile--avatar\" />\n          </span>\n          <div className=\"comment-form__field\">\n            <textarea placeholder=\"Add Reply\" id={'replytext' + id}\n              className=\"blog-textfield comment-textarea blog-textfield--ghost\"\n              aria-label=\"Add a Reply\"\n              name=\"comment[body_markdown]\"\n            >\n            </textarea>\n          </div>\n        </form>\n        <Button variant=\"outlined\" size=\"small\" className={classes.pushComment}\n          onClick={() => uploadReply(id)}>Reply it!</Button><br /><br />\n      </div>\n    ))\n  }\n  const addCommentCard = () => {\n    setCommentInput(commentInput.concat(\n      <div>\n        <CommentCard blogId={blogId} key={commentInput.length} />\n      </div>\n    ))\n  }\n\n  const addLike = (id) => {\n    setLiked(!liked);\n    setLCount(liked ? likeCount - 1 : likeCount + 1)\n    try {\n      axios.post('/like/reaction', { id, add: !liked })\n        .then(res => {\n          if (!res.data.liked) {\n            setLiked(liked)\n            setLCount(likeCount)\n          }\n        })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  const addImpression = (id) => {\n    setImpression(!impressed);\n    setICount(impressed ? impCount - 1 : impCount + 1)\n    try {\n      axios.post('/impression/reaction', { id, add: !impressed })\n        .then(res => {\n          if (!res.data.impressed) {\n            setImpression(impressed);\n            setICount(impCount)\n          }\n        })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n\n  return (\n    <>\n      < HeaderBar />\n      <div className=\"blog-container\">\n        <div className=\"blog-actions\">\n          <div className=\"actions-details\">\n            <div className=\"actions__inner\">\n              <button className=\"actionBox\" title=\"Like\" onClick={() => loggedIn ? addLike(blogId) : alert('Login to React')} >\n                {!liked ? <FavoriteBorderOutlinedIcon /> :\n                  <FavoriteIcon style={{ color: 'red' }} />\n                }\n                <div className=\"actionCouter\">\n                  <span>{likeCount}</span>\n                </div>\n              </button>\n              <button className=\"actionBox\" title=\"Impression\" onClick={() => loggedIn ? addImpression(blogId) : alert('Login to React')}>\n                {!impressed ? <OfflineBoltOutlinedIcon /> :\n                  <OfflineBoltIcon style={{ color: 'orange' }} />\n                }\n                <div className=\"actionCouter\">\n                  <span>{impCount}</span>\n                </div>\n              </button>\n              <button className=\"actionBox\" title=\"Visitor's Count\">\n                <PeopleAltIcon style={{ color: 'green' }} />\n                <div className=\"actionCouter\">\n                  <span>{visiCount}</span>\n                </div>\n              </button>\n              <button className=\"actionBox\" title=\"Read Now\">\n                <VisibilityIcon style={{ color: 'blue' }} />\n                <div className=\"actionCouter\">\n                  <span>{activeReaders}</span>\n                </div>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"blog-details\">\n          <div className=\"article-wrapper\">\n            <article className=\"blog-card blog-article\">\n              <header className=\"article__header\" id=\"main-title\">\n                <div className=\"article__cover\">\n                  <img src={'https://el-testing.s3.amazonaws.com/' + BlogData.Cover}\n                    style={{ backgroundColor: '#dddddd' }}\n                    className=\"article__cover__image\" alt={BlogData.Cover} />\n                </div>\n                <div className=\"article__header__meta\">\n                  <h1 className=\"blog_header\">\n                    {BlogData.Title}\n                  </h1><br />\n                  {tags.map(tag => (\n                    <a href=\"/t/webdev\" key={Math.random()} style={{ backgroundColor: '#' + (Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0'), }}\n                      className={classes.tags}>#{tag}</a>\n                  ))}<br /><br />\n                  <div className=\"article__subheader\">\n                    <time dateTime={BlogData.date_created} className=\"date-no-year\" title={BlogData.date_created}>{new Date(BlogData.date_created).toString().substring(0, 15)}</time>\n                    <span className=\"mr-4\">・14 min read</span>\n                  </div>\n                </div>\n              </header>\n\n              <div className=\"article__main\">\n                <nav className=\"blog-card blog-card--secondary\">\n                  <div dangerouslySetInnerHTML={{ __html: BlogData.Description }} />\n                </nav>\n              </div>\n\n              <section id=\"comments\" data-updated-at=\"2020-12-01 07:48:04 UTC\" className=\"text-padding mb-4 border-t-1 border-0 border-solid border-base-10\">\n                <header className=\"relative flex justify-between items-center mb-6\">\n                  <h3 className=\"blog-subtitle-1\">Discussion</h3>\n                  <div id=\"comment-subscription\">\n                    {loggedIn ?\n                      <div role=\"presentation\" className=\"blog-btn-group\">\n                        <span onClick={addCommentCard} className=\"blog-btn blog-btn--outlined\">Add Comment</span>\n                      </div> :\n                      <Link to={'/login'}>\n                        <div role=\"presentation\" className=\"blog-btn-group\">\n                          <span className=\"blog-btn blog-btn--outlined\">Login to Comment</span>\n                        </div>\n                      </Link>\n                    }\n                  </div>\n                </header>\n\n                {commentInput.map(input => { return input })}\n                <div id=\"comments-container\" data-commentable-id=\"519528\" data-commentable-type=\"Article\">\n                  <div>\n                    {\n                      commentData.map((comment) => {\n                        return (\n                          <Comment key={comment.commentId} comment={comment} />\n                        )\n                      })\n                    }\n                  </div>\n                </div>\n              </section>\n            </article>\n          </div>\n        </div>\n\n        <div className=\"author-details\">\n          <div className=\"blog-card blog-card--secondary branded-7 p-4 pt-0 gap-4 grid\" style={{ borderTopColor: '#0b4442' }}>\n            <div className=\"-mt-4\">\n              <a href=\"/bytebodger\" className=\"flex\">\n                <span className=\"blog-avatar blog-avatar--xl  mr-2 shrink-0\">\n                  <img src=\"https://avatars1.githubusercontent.com/u/32240906?s=460&v=4\" className=\"blog-avatar__image\" alt=\"Kartik Tyagi\" />\n                </span>\n                <span className=\"blog-link blog-subtitle-2 mt-5\">{BlogData.Author}</span>\n              </a>\n            </div>\n            <div className=\"color-base-70\">\n              Backend Web Developer\n              </div>\n            <div className=\"user-metadata-details\">\n              <ul className=\"user-metadata-details-inner\">\n                <li>\n                  <div className=\"key\">Work</div>\n                  <div className=\"value\">\n                    Web Developer at DataGrokr\n                    </div>\n                </li>\n                <li>\n                  <div className=\"key\">\n                    Location\n                    </div>\n                  <div className=\"value\">\n                    New Delhi, India\n                    </div>\n                </li>\n                <li>\n                  <div className=\"key\">\n                    Joined\n                    </div>\n                  <div className=\"value\">\n                    <time dateTime=\"2020-02-18T16:12:37Z\" className=\"date\">Jan 01, 2021</time>\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default BlogDetail;\n\nconst useStyles = makeStyles((theme) => ({\n  tags: {\n    position: 'relative',\n    marginRight: 10,\n    fontSize: 16,\n    padding: 5,\n    borderRadius: 5,\n    color: '#ffffff'\n  },\n  pushComment: {\n    position: 'relative',\n    marginLeft: 45\n  }\n}));","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/includes/footer.js",[],"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Blog/commentCard.js",[],"/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Test.js",["76","77"],"import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport ReplyIcon from '@material-ui/icons/Reply';\n\nfunction Test(props) {\n  const [commentInput, setCommentInput] = useState([])\n  const [reply_bool, setReplyBool] = useState(true)\n  const [replyInput, setreplyInput] = useState([])\n  const [selectedComment, setSelectedComment] = useState('');\n\n  const commentData = {\n    title: \"Fake article title.\",\n    author: \"grzm\",\n    comments: [\n      {\n        id: 1,\n        text: \"Example comment here.\",\n        author: \"user2\",\n        children: [\n          {\n            id: 2,\n            text: \"Another example comment text.\",\n            author: \"user3\",\n            children: [\n              {\n                id: 3,\n                text: \"Another example comment text.\",\n                author: \"user4\",\n                children: []\n              }\n            ]\n          }\n        ]\n      },\n      {\n        id: 4,\n        text: \"Example comment here 2.\",\n        author: \"user5\",\n        children: []\n      }\n    ]\n  }\n\n  function Comment({ comment }) {\n    const nestedComments = (comment.children || []).map(comment => {\n      return <Comment key={comment.id} comment={comment} type=\"child\" />\n    })\n\n    return (\n      <div style={{ \"marginLeft\": \"25px\", \"marginTop\": \"10px\" }}>\n        <div className=\"comment-form\" id=\"new_comment\">\n          <span className=\"blog-avatar m:blog-avatar--l mr-2 shrink-0\">\n            <img src=\"https://avatars1.githubusercontent.com/u/32240906?s=460&v=4\"\n              width=\"32\" height=\"32\" alt=\"pic\" className=\"blog-avatar__image overflow-hidden\" id=\"comment-primary-user-profile--avatar\" />\n          </span>\n          <div className=\"comment-form__field\">\n            <p className=\"comment-show\" style={{ border: '1px', padding: '10px' }}>\n              <div className=\"article__subheader\">\n                <a href=\"/bytebodger\" style={{ color: '#fff' }} className=\"flex items-center mr-4 mb-4 s:mb-0 fw-medium blog-link\">\n                  {comment.author}</a>\n                <span className=\"fs-s mb-4 s:mb-0\">\n                  ・<time datetime=\"2020-11-27T04:56:11Z\" style={{ color: '#999' }} title=\"Friday, 27 November 2020, 10:26:11\">27 Nov</time>\n                </span>\n              </div>{comment.text}\n            </p>\n          </div>\n        </div>\n        { selectedComment==comment.id && replyInput}\n        <div className=\"reply-btn\">\n          {reply_bool &&\n            <Button startIcon={<ReplyIcon />} onClick={() => addReplyCard(comment.id)} size=\"small\">Reply</Button>\n          }\n        </div>\n        {nestedComments}\n      </div>\n    )\n  }\n\n  const addReplyCard = (id) => {\n    setSelectedComment(id);\n    console.log(id)\n    setReplyBool(false)\n    setreplyInput(replyInput.concat(\n      <div className=\"reply-container\" key={Math.random()} data-commentable-type=\"Article\">\n        <form className=\"comment-form\" id=\"new_comment\" action=\"/comments\" acceptCharset=\"UTF-8\" method=\"post\"><input name=\"utf8\" type=\"hidden\" value=\"✓\" />\n          <span className=\"blog-avatar m:blog-avatar--l mr-2 shrink-0\">\n            <img src=\"https://avatars1.githubusercontent.com/u/32240906?s=460&v=4\"\n              width=\"32\" height=\"32\" alt=\"pic\" className=\"blog-avatar__image overflow-hidden\" id=\"comment-primary-user-profile--avatar\" />\n          </span>\n          <div className=\"comment-form__field\">\n            <textarea placeholder=\"Add Reply\" id=\"text-area\" className=\"blog-textfield comment-textarea blog-textfield--ghost\" aria-label=\"Add a comment\" name=\"comment[body_markdown]\">\n            </textarea>\n          </div>\n        </form>\n        <Button variant=\"outlined\" size=\"small\" >Reply it!</Button><br /><br />\n      </div>\n    ))\n  }\n\n\n\n  return (\n    <>\n      <div className=\"blog-actions\">\n        <div className=\"actions-details\">\n\n          <div id=\"comments-container\" data-commentable-id=\"519528\" data-commentable-type=\"Article\">\n            <div>\n              {\n                commentData.comments.map((comment) => {\n                  return (\n                    <Comment key={comment.id} comment={comment} />\n                  )\n                })\n              }\n            </div>\n          </div>\n          {commentInput.map(input => { return input })}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Test;","/media/tyagi/Imp/Dev/Placement Task/DATAGROKR/client/src/components/Blog/blogCard.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"78","replacedBy":"82"},{"ruleId":"80","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":8,"column":23,"nodeType":"86","messageId":"87","endLine":8,"endColumn":34},{"ruleId":"78","replacedBy":"88"},{"ruleId":"80","replacedBy":"89"},{"ruleId":"84","severity":1,"message":"90","line":32,"column":25,"nodeType":"86","messageId":"87","endLine":32,"endColumn":41},{"ruleId":"84","severity":1,"message":"91","line":6,"column":24,"nodeType":"86","messageId":"87","endLine":6,"endColumn":39},{"ruleId":"92","severity":1,"message":"93","line":68,"column":26,"nodeType":"94","messageId":"95","endLine":68,"endColumn":28},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],["96"],["97"],"no-unused-vars","'setRedirect' is assigned a value but never used.","Identifier","unusedVar",["96"],["97"],"'setActiveReaders' is assigned a value but never used.","'setCommentInput' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]